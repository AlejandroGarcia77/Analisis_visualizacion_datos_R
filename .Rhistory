#scale_fill_viridis ( option = 'magma', discrete =TRUE) + # Paleta continua usada como discreta
theme_a()
#mi_paleta <- brewer.pal(8,"Blues") # Paleta secuencial
print (brewer.pal(8,"Blues"))
## Librer?as necesarias
if (!"tidyverse" %in% installed.packages()) {install.packages("tidyverse")}
library(tidyverse) #suit completa
if (!"scales" %in% installed.packages()) {install.packages("scales")}
library(scales) #para formato de las escalas
if (!"ggrepel" %in% installed.packages()) {install.packages("ggrepel")}
library(ggrepel)   # para etiquetas
if (!"gghighlight" %in% installed.packages()) {install.packages("gghighlight")}
library(gghighlight) #para resaltar l?neas
if (!"gganimate" %in% installed.packages()) {install.packages("gganimate")}
library(gganimate)
if (!"RColorBrewer" %in% installed.packages()) {install.packages("RColorBrewer")}
library(RColorBrewer) #para color
if (!"viridis" %in% installed.packages()) {install.packages("viridis")}
library(viridis)
theme_a <- function(base_size = 13,
base_family = "sans"
)
{
tema <-
theme_bw(base_size=base_size) +
theme(legend.position="right") +
theme(legend.text = element_text(size=base_size+1,family = base_family)) +
theme(plot.title=element_text(size=base_size+4,
face = "bold",
vjust=1.25,
family=base_family,
hjust = 0.5
)) +
theme(plot.subtitle=element_text(size=base_size+3, family = base_family,  hjust = 0.5))  +
theme(text = element_text(size=base_size+2,family = base_family)) +
theme(axis.text.x=element_text(size=base_size+1,family = base_family)) +
theme(axis.text.y=element_text(size=base_size+1, family = base_family)) +
theme(axis.title.x=element_text(size=base_size+2, vjust=0, family = base_family)) +
theme(axis.title.y=element_text(size=base_size+2, vjust=1.25, family = base_family)) +
theme(plot.caption=element_text(size=base_size, family = base_family)) +
theme(strip.text = element_text(size=base_size, family = base_family)) +
theme(strip.text.x = element_text(size=base_size, family = base_family)) +
theme(strip.text.y = element_text(size=base_size, family = base_family)) +
theme(plot.caption = element_text(hjust = 1))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
return (tema)
}
url_4247 <- "https://www.ine.es/jaxiT3/files/t/es/csv_bdsc/4247.csv?nocab=1"
paro <- read_csv2(url_4247,na = c("..")) # Leemos y quitamos los valores nulos
print (paro)
color_sexo <- c(Hombres = "blue",Mujeres = "purple") # Color para sexo
orden_edad <- c( "De 16 a 19 años",
"De 20 a 24 años",
"De 25 a 54 años",
"55 y más años",
"Menores de 25 años",
"25 y más años","Total") # Orden para edades
paro <- separate(paro, Periodo, c("year","quarter"), sep="T") %>% # Separamos trimestre de a?o
mutate (fecha =ifelse (quarter == "4",paste0(year,"-",as.integer(quarter)*3,"-30"),
paste0(year,"-0",as.integer(quarter)*3,"-30")))
paro$fecha <- as.Date (paro$fecha, format= "%Y-%m-%d")
tail (paro)
paro <- rename (paro, ccaa= `Comunidades y Ciudades Autónomas`) # cambiamos de nombre de variable por comodidad
paro$ccaa <- str_replace (paro$ccaa,"[0-9]+ ", "")  # Quitamos el c?digo a de la autonom?a
paro$ccaa <- str_replace (paro$ccaa,"[,].+", "")  # Simplificamos nombre
paro$Edad <- factor(paro$Edad,levels=orden_edad) # Ordenamos rangos de edad
tail (paro)
media_paro_spain <- paro  %>%
filter (Sexo == "Ambos sexos" &
ccaa == "Total Nacional" &
Edad == "Total")
print(media_paro_spain)
media_paro_spain_total <- mean (media_paro_spain$Total)
print(media_paro_spain_total)
url_22344 <- "https://www.ine.es/jaxiT3/files/t/es/csv_bdsc/22344.csv?nocab=1"
inflacion <- read_csv2(url_22344)
print (inflacion)
inflacion  <-  inflacion %>%
filter (`Grupos ECOICOP` == "Índice general" &
`Tipo de dato` == "Variación mensual" )
print (inflacion )
inflacion  <-  separate(inflacion, Periodo, c("year","mes"), sep="M") %>% # Separamos trimestre de a?o
mutate(fecha = ifelse (mes != "02" , paste(year,mes,"30",sep='-'),
paste(year,mes,"28",sep='-')))
inflacion$fecha <-  as.Date (inflacion$fecha,format = "%Y-%m-%d")
print(inflacion)
inflacion <- filter (inflacion, mes == "03" | mes == "06"|
mes == "09" | mes == "12")
print (inflacion)
# filtramos los datos
df <- paro  %>%
filter (Sexo != "Ambos sexos" &
ccaa == "Total Nacional" &
Edad == "Total")
min_fecha = min (df$fecha)
max_fecha = max (df$fecha)
fechas_visibles <- (seq (min_fecha,max_fecha, by = "3 years") )
options(repr.plot.width=10, repr.plot.height=7)
options(repr.plot.width=12, repr.plot.height=10)
if (!"ggpol" %in% installed.packages()) {install.packages("ggpol")}
library(ggpol)
ggplot(df, aes(x = separa_genero  , y = reorder(ccaa,desc(Total)), fill = Sexo)) +
geom_col( alpha =0.5) +
geom_text(aes(label=paste0(Total,"%")),
position=position_stack(vjust = 0.5),
size=5,
color="white")+
scale_fill_manual(values = color_sexo) +
#scale_x_continuous (labels=function(x) percent(scale = 1,abs(x))) +
facet_share(~Sexo, dir = "h", scales = "free", reverse_num = TRUE) +   # note: scales = "free"
labs(title = paste("Tasa de paro actual por g?nero y autonom?a\n", max(df$fecha)),
x="",y="")+
theme_a() +
theme (legend.position = "top",
panel.border = element_blank(),
strip.background =element_blank())
library("tidyverse")
options(repr.plot.width=12, repr.plot.height=10)
if (!"ggpol" %in% installed.packages()) {install.packages("ggpol")}
library(ggpol)
ggplot(df, aes(x = separa_genero  , y = reorder(ccaa,desc(Total)), fill = Sexo)) +
geom_col( alpha =0.5) +
geom_text(aes(label=paste0(Total,"%")),
position=position_stack(vjust = 0.5),
size=5,
color="white")+
scale_fill_manual(values = color_sexo) +
#scale_x_continuous (labels=function(x) percent(scale = 1,abs(x))) +
facet_share(~Sexo, dir = "h", scales = "free", reverse_num = TRUE) +   # note: scales = "free"
labs(title = paste("Tasa de paro actual por g?nero y autonom?a\n", max(df$fecha)),
x="",y="")+
theme_a() +
theme (legend.position = "top",
panel.border = element_blank(),
strip.background =element_blank())
if (!"ggpol" %in% installed.packages()) {install.packages("ggpol")}
library(ggpol)
ggplot(df, aes(x = separa_genero  , y = reorder(ccaa,desc(Total)), fill = Sexo)) +
geom_col( alpha =0.5) +
geom_text(aes(label=paste0(Total,"%")),
position=position_stack(vjust = 0.5),
size=5,
color="white")+
scale_fill_manual(values = color_sexo) +
#scale_x_continuous (labels=function(x) percent(scale = 1,abs(x))) +
facet_share(~Sexo, dir = "h", scales = "free", reverse_num = TRUE) +   # note: scales = "free"
labs(title = paste("Tasa de paro actual por g?nero y autonom?a\n", max(df$fecha)),
x="",y="")+
theme_a() +
theme (legend.position = "top",
panel.border = element_blank(),
strip.background =element_blank())
options(repr.plot.width=14, repr.plot.height=9)
ggplot() +
geom_step(data = df, aes(x = fecha, y = Total, color = ccaa)) +
gghighlight(max(Total) > 1) + # funci?n de resaltado
geom_line (data = media_paro_spain, aes(x = fecha, y = Total),
color="black", size = 1,
alpha = 1) +
scale_color_viridis (option = 'plasma', discrete =TRUE,
direction =-1,
begin=0.2, end=0.8) + # Paleta cont?nua, uso discreto
scale_y_continuous (labels=scales::percent_format(scale = 1,accuracy = 1L),
breaks = seq(0, max_value, by = tramo)) +
scale_x_date (limits=c (min(df$fecha, na.rm = TRUE)-(365*3), max(df$fecha, na.rm = TRUE)+(365*3)),
breaks = c (min(df$fecha),max(df$fecha)),
labels = date_format("%Y")) +  #Ajustamos las etiquetas del eje
labs(x = "Trimestre", y = "Tasa de paro",
title = "Evoluci?n de la tasa de paro por Autonom?a",
caption = "@congosto\nFuente: INE") +
guides(color = "none") +
facet_wrap(~ ccaa) +
theme_a()
shiny::runApp('C:/R/shiny/demo')
if (!"eurostat" %in% installed.packages()) {install.packages("eurostat", dependencies = TRUE)}
library(eurostat)
toc <- get_eurostat_toc()
kable(head(toc))
if (!"knitr" %in% installed.packages()) {install.packages("knitr", dependencies = TRUE)}
library(knitr)
kable(head(toc))
kable(head(search_eurostat("Mean and median income by age and sex - EU-SILC and ECHP surveys")))
dat <- get_eurostat("ilc_di03 ", time_format = "date")
dat <- get_eurostat("ilc_di03 ")
kable(head(search_eurostat("Harmonised index of consumer")))
Mean and median income by age and sex - EU-SILC and ECHP surveys
kable(head(search_eurostat("Mean and median income by age and sex - EU-SILC and ECHP surveys")))
dat <- get_eurostat("Mean and median income by age and sex - EU-SILC and ECHP surveys ")
dat <- get_eurostat("ilc_di03")
head(data)
head(data)
shiny::runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
shiny::runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
runApp('D:/R/Practica/Renta_Mediana_Shiny/Renta_Mediana')
library(tidyverse)
library(eurostat)
library(rvest)
library(knitr)
library(data.table)
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
setwd("D:/R/Practica")
tema_3 <- function(base_size = 13,
base_family = "sans",
plot_width = 12
)
{
tema <-
theme_bw(base_size=base_size) +
theme(legend.position="none") +
theme(plot.title=element_blank()) +
theme(plot.subtitle=element_text(size=base_size+3, family = base_family,  hjust = 0.5))  +
theme(text = element_text(size=base_size+2,family = base_family)) +
theme(axis.text.x=element_text(size=base_size+1,family = base_family)) +
theme(axis.text.y=element_text(size=12,family = base_family)) +
theme(axis.title.x=element_text(size=base_size+2, vjust=0, family = base_family)) +
theme(axis.title.y=element_text(size=base_size+2, vjust=1.25, family = base_family)) +
theme(plot.caption=element_text(size=base_size, family = base_family)) +
theme(strip.text = element_text(size=base_size, family = base_family)) +
theme(strip.text.x = element_text(size=base_size, family = base_family)) +
theme(strip.text.y = element_text(size=base_size, family = base_family)) +
theme(plot.caption = element_text(hjust = 1))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
)
return (tema)
}
dataset_ue <- get_eurostat("ilc_di03")
renta_mediana_ccaa <- read.csv2("Renta media y mediana. Serie 2008-2022 por renta, CCAA y periodo.csv")
diccionario_paises<- c("AT" = "Austria","BE" = "Bélgica","BG" = "Bulgaria","CY" = "Chipre","CZ" = "República Checa",
"DE" = "Alemania","DK" = "Dinamarca","EE" = "Estonia","EL" = "Grecia","ES" = "España",
"FI" = "Finlandia","FR" = "Francia","HR" = "Croacia","HU" = "Hungría","IE" = "Irlanda",
"IT" = "Italia","LV" = "Letonia","LT" = "Lituania","LU" = "Luxemburgo","MT" = "Malta",
"NL" = "Países Bajos","PL" = "Polonia","PT" = "Portugal","RO" = "Rumanía","SE" = "Suecia",
"SI" = "Eslovenia","SK" = "Eslovaquia")
renta_mediana_ue <- subset(dataset_ue, geo %in% names(diccionario_paises) & TIME_PERIOD == "2019-01-01" & sex == "T" & indic_il == "MED_E" & unit == "EUR" & age == "TOTAL")
renta_mediana_ue$geo <- sapply(renta_mediana_ue$geo, function(x) diccionario_paises[x])
renta_mediana_ccaa <- subset(renta_mediana_ccaa, periodo == "2019" & Renta == "Mediana")
#Cambiamos el nombre de la columna para su mejor interpretación
renta_mediana_ccaa <- rename(renta_mediana_ccaa, CCAA = Comunidades.y.Ciudades.Autónomas)
#Cambiamos el nombre de la columna para su mejor interpretación
renta_mediana_ue <- rename(renta_mediana_ue, CCAA = geo)
renta_mediana_ue <- rename(renta_mediana_ue, Total = values)
#Eliminamos las columnas innecesarias
renta_mediana_ccaa <- select(renta_mediana_ccaa, c(CCAA,Total))
#Eliminamos las columnas innecesarias
renta_mediana_ue <- select(renta_mediana_ue, c(CCAA,Total))
#Eliminamos los que no tenga CCAA (Nivel nacional)
renta_mediana_ccaa <- subset(renta_mediana_ccaa, CCAA != "")
#Quitamos el . del Total
renta_mediana_ccaa$Total <- gsub("\\.", "", renta_mediana_ccaa$Total)
#Eliminamos los números de las CCAA
renta_mediana_ccaa$CCAA <- str_replace_all(renta_mediana_ccaa$CCAA, "[0-9]+ ", "")
#Eliminamos el sobrante del nombre
renta_mediana_ccaa$CCAA <- str_replace_all(renta_mediana_ccaa$CCAA, ",.*", "")
#Unimos las tablas
renta_mediana_conjunta <- rbind(renta_mediana_ccaa, renta_mediana_ue)
renta_mediana_conjunta <- mutate(renta_mediana_conjunta,
titulo_grafica = paste0(CCAA, " (", Total, ")"))
#Transformamos el Total a entero para su correcta interpretación gráfica
renta_mediana_conjunta$Total <- as.integer(renta_mediana_conjunta$Total)
array_UE <- reactive({
input$inputUE
})
array_CCAA <- reactive({
input$inputCCAA
})
output$graficaRenta <- renderPlot({
dataset_final <- subset(renta_mediana_conjunta, CCAA %in% array_UE() | CCAA %in% array_CCAA() )
ggplot(dataset_final,
#Ordenamos por el total de manera Creciente
aes(y = reorder(titulo_grafica, Total, decreasing = FALSE), x = Total, fill = as.integer(reorder(titulo_grafica, Total, decreasing = TRUE)))) +
geom_bar(stat = "identity") +
labs(title = "Renta mediana por comunidad autónoma y paises de la UE 2019",
caption ="Alejandro García Gallego\nFuente: INE",y = "", x="Renta anual €")+
scale_fill_gradient(low ="#AA3225",high = "#FABD00")+
tema_3()
})
})
setwd("D:/R/Practica") #cambiar el working directory
library(tidyverse)
if (!"mapSpain" %in% installed.packages()) {install.packages("mapSpain", dependencies = TRUE)}
library (mapSpain)
if (!"eurostat" %in% installed.packages()) {install.packages("eurostat", dependencies = TRUE)}
library(eurostat)
tema_1 <- function(base_size = 13,
base_family = "sans"
)
{
tema <-
theme_bw(base_size=base_size) +
theme(legend.position="none") +
theme(legend.text = element_text(size=base_size+1,family = base_family)) +
theme(plot.title=element_text(size=base_size+4,
face = "bold",
vjust=1.25,
family=base_family,
hjust = 0.5
)) +
theme(plot.subtitle=element_text(size=base_size+3, family = base_family,  hjust = 0.5))  +
theme(text = element_text(size=base_size+2,family = base_family)) +
theme(axis.text.x=element_text(size=base_size+1,family = base_family)) +
theme(axis.text.y=element_text(size=base_size+1, family = base_family)) +
theme(axis.title.x=element_text(size=base_size+2, vjust=0, family = base_family)) +
theme(axis.title.y=element_text(size=base_size+2, vjust=1.25, family = base_family)) +
theme(plot.caption=element_text(size=base_size, family = base_family)) +
theme(strip.text = element_text(size=base_size, family = base_family)) +
theme(strip.text.x = element_text(size=base_size, family = base_family)) +
theme(strip.text.y = element_text(size=base_size, family = base_family)) +
theme(plot.caption = element_text(hjust = 1))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
return (tema)
}
tema_2 <- function(base_size = 13,
base_family = "sans"
)
{
tema <-
theme(legend.position="right") +
theme(legend.text = element_text(size=base_size+1,family = base_family)) +
theme(plot.title=element_text(size=base_size+4,
face = "bold",
vjust=1.25,
family=base_family,
hjust = 0.5
)) +
theme(plot.subtitle=element_text(size=base_size+3, family = base_family,  hjust = 0.5))  +
theme(text = element_text(size=base_size+2,family = base_family)) +
theme(axis.text.x=element_text(size=base_size+1,family = base_family)) +
theme(axis.text.y=element_text(size=base_size+1, family = base_family)) +
theme(axis.title.x=element_blank()) +
theme(axis.title.y=element_blank()) +
theme(plot.caption=element_text(size=base_size, family = base_family)) +
theme(axis.line.x = element_blank())+
theme(axis.text.x = element_blank())+
theme(axis.text.y = element_blank())+
theme(axis.line.y = element_blank())+
theme(axis.ticks.x = element_blank())+
theme(axis.ticks.y = element_blank())+
theme(panel.background = element_rect(fill = "lightblue"))+
theme(strip.text = element_text(size=base_size, family = base_family)) +
theme(plot.caption = element_text(hjust = 1))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
return (tema)
}
tema_3 <- function(base_size = 13,
base_family = "sans"
)
{
tema <-
theme_bw(base_size=base_size) +
theme(legend.position="none") +
theme(plot.title=element_text(size=base_size+4,
face = "bold",
vjust=1.25,
family=base_family,
hjust = 0.5
)) +
theme(plot.subtitle=element_text(size=base_size+3, family = base_family,  hjust = 0.5))  +
theme(text = element_text(size=base_size+2,family = base_family)) +
theme(axis.text.x=element_text(size=base_size+1,family = base_family)) +
theme(axis.text.y=element_text(size=12,family = base_family)) +
theme(axis.title.x=element_text(size=base_size+2, vjust=0, family = base_family)) +
theme(axis.title.y=element_text(size=base_size+2, vjust=1.25, family = base_family)) +
theme(plot.caption=element_text(size=base_size, family = base_family)) +
theme(strip.text = element_text(size=base_size, family = base_family)) +
theme(strip.text.x = element_text(size=base_size, family = base_family)) +
theme(strip.text.y = element_text(size=base_size, family = base_family)) +
theme(plot.caption = element_text(hjust = 1))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
return (tema)
}
tasa_empleo_ccaa <- read_csv2("Tasa de empleo por CCAA y periodo.csv")
tasa_empleo_ue <- read.csv2("Tasa de empleo por ámbito geográfico y periodo.csv")
var_periodo <- 2019
#Nos quedamos con el año 2019
tasa_empleo_ccaa <- filter(tasa_empleo_ccaa, periodo == var_periodo)
#Nos quedamos con el año 2019 y la UE
tasa_empleo_ue <- filter(tasa_empleo_ue, periodo == var_periodo & Ámbito.geográfico == "Unión Europea")
#Eliminamos las filas nulas
tasa_empleo_ccaa <- na.omit(tasa_empleo_ccaa)
tasa_empleo_ccaa <- select(tasa_empleo_ccaa, -"Total Nacional")
#Modificamos los nombres de las columnas para su union
colnames(tasa_empleo_ccaa)[1] <- "CCAA"
colnames(tasa_empleo_ue)[1] <- "CCAA"
#Eliminamos los números de las CCAA
tasa_empleo_ccaa$CCAA <- str_replace_all(tasa_empleo_ccaa$CCAA, "[0-9]+ ", "")
#Eliminamos el sobrante del nombre
tasa_empleo_ccaa$CCAA <- str_replace_all(tasa_empleo_ccaa$CCAA, ",.*", "")
#Unimos las tablas
tasa_empleo_conjunta <- rbind(tasa_empleo_ccaa, tasa_empleo_ue)
tasa_empleo_conjunta
tasa_empleo_conjunta <- tasa_empleo_conjunta[order(tasa_empleo_conjunta$Total,decreasing = TRUE), ]
#Añadimos una columna con el formato CCAA(Total) para una mejor visualización
tasa_empleo_conjunta <- mutate(tasa_empleo_conjunta,
titulo_grafica = paste0(CCAA, " (", Total, ")"))
tasa_empleo_conjunta
colores <- c("#AA3225","#AE3922","#B24120","#B7491E","#BB501C","#004494","#C0581A","#C46018","#C96816" #Color UE
,"#CD6F14","#D27712","#D67F10","#DA860E","#DF8E0C",
"#E3960A","#E89E08","#ECA506","#F1AD04","#F5B502","#FABD00") #Rojo y Gualda
ggplot(tasa_empleo_conjunta,
#Ordenamos por el total de manera Creciente
aes(y = reorder(titulo_grafica, Total, decreasing = FALSE), x = Total,fill=reorder(titulo_grafica, Total, decreasing = TRUE))) +
geom_bar(stat = "identity") +
labs(title = "Tasa de empleo por comunidad autónoma 2019",
caption ="Alejandro García Gallego\nFuente: INE",y = "", x="Tasa de empleo %")+
scale_fill_manual(values = colores)+
tema_1()
delicuencia_ccaa <- read.csv2("Tasa de homicidios y criminalidad por CCAA, tipo de tasa y periodo.csv")
#Nos quedamos con el año 2019 y la tasa de criminalidad
delicuencia_ccaa <- filter(delicuencia_ccaa, periodo == var_periodo, Tipo.de.tasa == "Tasa de criminalidad")
#Eliminamos las filas nulas
delicuencia_ccaa <- na.omit(delicuencia_ccaa)
#Eliminamos la columna innecesaria
delicuencia_ccaa <- select(delicuencia_ccaa, -"Total.Nacional")
#Cambiamos el nombre de la columna para su mejor interpretación
colnames(delicuencia_ccaa)[1] <- "CCAA"
#Eliminamos los que no tenga CCAA (Nivel nacional)
delicuencia_ccaa <- subset(delicuencia_ccaa, CCAA != "")
#Eliminamos los números de las CCAA
delicuencia_ccaa$CCAA <- str_replace_all(delicuencia_ccaa$CCAA, "[0-9]+ ", "")
head(delicuencia_ccaa)
#Cargamos el mapa de españa por CCAA
mapa_ccaa <- esp_get_ccaa()
#Cambiamos el nombre de la columna para hacer la unión
mapa_ccaa <- rename(mapa_ccaa, CCAA = ine.ccaa.name)
#Unimos las tablas para visualizar el gráfico
df_mapa <- inner_join(delicuencia_ccaa, mapa_ccaa, by ="CCAA")
head(df_mapa)
ggplot(data = df_mapa) +
geom_sf(aes(fill = Total,geometry = geometry)) +
labs(title = "Tasa de criminalidad por comunidad autónoma 2019",
caption ="Alejandro García Gallego\nFuente: INE",
fill = "%")+
scale_fill_continuous(low = "#FABD00", high = "#AA3225")+
tema_2()
runApp('Renta_Mediana_Shiny/Renta_Mediana')
#Obtenemos los datos de Renta media y mediana de eurostat
dataset_ue <- get_eurostat("ilc_di03")
#Cargamos las rentas de las CCAA
renta_mediana_ccaa <- read.csv2("Renta media y mediana. Serie 2008-2022 por renta, CCAA y periodo.csv")
#Creamos un diccionario para relacionarlos con sus siglas
diccionario_paises<- c("AT" = "Austria","BE" = "Bélgica","BG" = "Bulgaria","CY" = "Chipre","CZ" = "República Checa",
"DE" = "Alemania","DK" = "Dinamarca","EE" = "Estonia","EL" = "Grecia","ES" = "España",
"FI" = "Finlandia","FR" = "Francia","HR" = "Croacia","HU" = "Hungría","IE" = "Irlanda",
"IT" = "Italia","LV" = "Letonia","LT" = "Lituania","LU" = "Luxemburgo","MT" = "Malta",
"NL" = "Países Bajos","PL" = "Polonia","PT" = "Portugal","RO" = "Rumanía","SE" = "Suecia",
"SI" = "Eslovenia","SK" = "Eslovaquia")
#Nos quedamos con la renta mediana de las UE del 2019 en euros
renta_mediana_ue <- subset(dataset_ue, geo %in% names(diccionario_paises) & TIME_PERIOD == "2019-01-01" & sex == "T" & indic_il == "MED_E" & unit == "EUR" & age == "TOTAL")
#Cambiamos sus siglas por el nombre en Español de los países
renta_mediana_ue$geo <- sapply(renta_mediana_ue$geo, function(x) diccionario_paises[x])
#Nos quedamos con la renta mediana de las comunidades en el 2019
renta_mediana_ccaa <- subset(renta_mediana_ccaa, periodo == "2019" & Renta == "Mediana")
#Cambiamos el nombre de la columna para su mejor interpretación
renta_mediana_ccaa <- rename(renta_mediana_ccaa, CCAA = Comunidades.y.Ciudades.Autónomas)
#Cambiamos el nombre de la columna para su mejor interpretación
renta_mediana_ue <- rename(renta_mediana_ue, CCAA = geo)
renta_mediana_ue <- rename(renta_mediana_ue, Total = values)
#Eliminamos las columnas innecesarias
renta_mediana_ccaa <- select(renta_mediana_ccaa, c(CCAA,Total))
#Eliminamos las columnas innecesarias
renta_mediana_ue <- select(renta_mediana_ue, c(CCAA,Total))
#Eliminamos los que no tenga CCAA (Nivel nacional)
renta_mediana_ccaa <- subset(renta_mediana_ccaa, CCAA != "")
#Quitamos el . del Total
renta_mediana_ccaa$Total <- gsub("\\.", "", renta_mediana_ccaa$Total)
#Eliminamos los números de las CCAA
renta_mediana_ccaa$CCAA <- str_replace_all(renta_mediana_ccaa$CCAA, "[0-9]+ ", "")
#Eliminamos el sobrante del nombre
renta_mediana_ccaa$CCAA <- str_replace_all(renta_mediana_ccaa$CCAA, ",.*", "")
renta_mediana_ccaa
renta_mediana_ue
#Unimos las tablas
renta_mediana_conjunta <- rbind(renta_mediana_ccaa, renta_mediana_ue)
#Añadimos una columna con el formato CCAA/País(Total) para una mejor visualización
renta_mediana_conjunta <- mutate(renta_mediana_conjunta,
titulo_grafica = paste0(CCAA, " (", Total, ")"))
#Transformamos el Total a entero para su correcta interpretación gráfica
renta_mediana_conjunta$Total <- as.integer(renta_mediana_conjunta$Total)
renta_mediana_conjunta
ggplot(renta_mediana_conjunta,
#Ordenamos por el total de manera Creciente
aes(y = reorder(titulo_grafica, Total, decreasing = FALSE), x = Total, fill = as.integer(reorder(titulo_grafica, Total, decreasing = TRUE)))) +
geom_bar(stat = "identity",width = 0.6) +
labs(title = "Renta mediana por comunidad autónoma y paises de la UE 2019",
caption ="Alejandro García Gallego\nFuente: INE",y = "", x="Renta anual €")+
scale_fill_gradient(low ="#AA3225",high = "#FABD00")+
tema_3()
